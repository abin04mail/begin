# from tkinter import *
# from random import randint
# root=Tk()
# root.title('Рис')
# root.geometry('700x500')
# can=Canvas(root,width=600,height=400,bg='cyan')
# can.pack()
# def change():
#     rec = can.create_rectangle(0,0,600,400,fill='cyan')
#     can.itemconfig(rec, fill='cyan')
#     rand = randint(1,3)
#     if rand == 1:
#         can.create_rectangle(30,30,300,300,fill='blue')
#     elif rand == 2:
#         can.create_oval(30,30,300,300, fill='yellow')
#     else:
#         can.create_polygon(30,30,30,300,300,300, fill='red')
# button =Button(root,text=u'Нажми', command=change)
# button.pack(side=BOTTOM)
# root.mainloop()

# Импортируем библиотеку, соответствующую типу нашей базы данных 
# import sqlite3

# try:
#     # Создаем соединение с нашей базой данных
#     # В нашем примере у нас это просто файл базы
#     conn = sqlite3.connect('/home/serg/Python/work/Chinook_Sqlite.sqlite')

#     # Создаем курсор - это специальный объект который делает запросы и получает их результаты
#     cursor = conn.cursor()

#     # ТУТ БУДЕТ НАШ КОД РАБОТЫ С БАЗОЙ ДАННЫХ
#     # КОД ДАЛЬНЕЙШИХ ПРИМЕРОВ ВСТАВЛЯТЬ В ЭТО МЕСТО
#     # Делаем SELECT запрос к базе данных, используя обычный SQL-синтаксис
#     cursor.execute("SELECT Name FROM Artist ORDER BY Name LIMIT 3")

#     # Получаем результат сделанного запроса
#     results = cursor.fetchall()
#     results2 =  cursor.fetchall()

#     print(results)   # [('A Cor Do Som',), ('Aaron Copland & London Symphony Orchestra',), ('Aaron Goldberg',)]
#     print(results2)  # []

# except sqlite3.DatabaseError as err:       
#     print("Error: ", err)
# else:
#     conn.commit()
#     # Не забываем закрыть соединение с базой данных
#     conn.close()

# -*- coding: utf-8 -*-
# Поиск минимального и максимального числа
# A = float(input('Введите число1: '))
# B = float(input('Введите число2: '))
# C = float(input('Введите число3: '))
# lst = [A, B, C]
# lst.sort()
# print('минимальное число : ', lst[0])
# print('максимальное число: ', lst[2])

# -*- coding: utf-8 -*-
# Вычислить Р и S треугольника по формуле Герона
# Подключаем нужный программный модуль
# import math
# a = float(input('Введите сторону 1: '))
# b = float(input('Введите сторону 2: '))
# c = float(input('Введите сторону 3: '))
# P = a + b + c
# print('Периметр: ',P)
# print('Площадь: ', math.sqrt(P*(P-a)*(P-b)*(P-c)))

# -*- coding: utf-8 -*-
# введенное число четное и кратно 5
# a = int(input('Введите число: '))
# print('число четное' if a%2==0 else 'число нечетное')
# print('число кратно 5' if a%5==0 else '')

# -*- coding: utf-8 -*-
# Имеется коробка со сторонами: A x B x C. Определить, пройдёт ли она в дверь с размерами M x K
# a, b, c, m, k = input('Введите размеры коробки AxBxC и двери MxK через запятую: ').split(',')
# lst1 = [float(a), float(b), float(c), float(m), float(k)]
# lst1.sort()
# mi = min(float(m), float(k))
# ma = max(float(m), float(k))
# #print(lst1, mi, ma)
# print('проходит' if (lst1[0]<mi and lst1[4]==ma) else 'не проходит')

# -*- coding: utf-8 -*-
# Дано вещественное число. Определить, какое это число: положительное, отрицательное, ноль
# a = float(input('Введите число: '))
# if a>0:
#     print('число положительное')
# elif a==0:
#     print('введено число ноль')
# else:
#     print('число отрицательное')

# -*- coding: utf-8 -*-
# Можно ли из бревна, имеющего диаметр поперечного сечения D,
#  выпилить квадратный брус шириной A?
# import math
# d = float(input('Введите в см. диаметр бревна: '))
# a = float(input('Введите в см. ширину бруса: '))
# if a<(d/math.sqrt(2)):
#     print('брус шириной ', a, ' см. получится из этого бревна')
# else :
#     print('брус шириной ', a, ' см. не получится из этого бревна')

# -*- coding: utf-8 -*-
# Можно ли в квадратном зале площадью S поместить круглую сцену радиусом R
# так, чтобы от стены до сцены был проход не менее K?
# import math
# s = float(input('Введите в м*2 площадь зала: '))
# r = float(input('Введите в м. радиус сцены: '))
# k = float(input('Введите в м. проход между сценой и стеной: '))
# if r<(math.sqrt(s)/2-k):
#     print('сцена радиусом ', r, ' м. поместится в этом зале')
# else :
#     print('сцена радиусом ', r, ' м. не поместится в этом зале')

# -*- coding: utf-8 -*-
# Дан номер места в плацкартном вагоне. 
# Определить, какое это место: верхнее или нижнее, в купе или боковое
# s = int(input('Введите номер места: '))
# print('купе ' if s<37 else 'боковое ', end="")
# print('верхнее место' if s%2==0 else 'нижнее место')

# -*- coding: utf-8 -*-
# Известна денежная сумма. Разменять её купюрами 500, 100, 10 и монетой 2 руб.,
# если это возможно
# s = int(input('Введите сумму в руб.: '))
# ost500 = s-(s//500)*500
# ost100 = ost500-(ost500//100)*100
# ost10 = ost100-(ost100//10)*10
# if ost10%2!=0:
#     print('данную сумму этими купюрами разменять нельзя')
# else:
#     print('размен', '\n',s//500, 'по 500 руб.; ')
#     print(ost500//100, 'по 100 руб.; ')
#     print(ost100//10, 'по 10 руб.; ')
#     print(ost10//2, 'по 2 руб.')

# -*- coding: utf-8 -*-
# Имеются две ёмкости: кубическая с ребром A, цилиндрическая с высотой H и радиусом основания R.
# Определить, поместится ли жидкость объёма M в первую ёмкость, во вторую, в обе.
# import math
# a = float(input('Введите в м. ребро кубической емкости: '))
# h = float(input('Введите в м. высоту цилиндрической емкости: '))
# r = float(input('Введите в м. радиус цилиндрической емкости: '))
# m = float(input('Введите в кубических метрах объем жидкости: '))
# cub = a**3
# cyl = h*2*r*math.pi
# v = (cub, cyl)
# if cub>cyl:
#     (big,small) = ('куб', 'цилиндр')
# else:
#     (big,small) = ('цилиндр', 'куб')
# if m>(cub+cyl):
#     print('жидкость не поместится в две емкости')
# elif max(v)<m<(cub+cyl):
#     print('жидкость поместится в две емкости, в одну любую емкость не поместится')
# elif min(v)<m<max(v):
#     print('жидкость поместится в ', big, 'но не поместится в ', small)
# else:
#     print('жидкость поместится в любую емкость')


# Имеются две ёмкости: кубическая с ребром A, цилиндрическая с высотой H и радиусом основания R.
# Определить, можно ли заполнить жидкостью объёма M первую ёмкость, вторую, обе
# import math
# a = float(input('Введите в м. ребро кубической емкости: '))
# h = float(input('Введите в м. высоту цилиндрической емкости: '))
# r = float(input('Введите в м. радиус цилиндрической емкости: '))
# m = float(input('Введите в кубических метрах объем жидкости: '))
# cub = a**3
# cyl = h*2*r*math.pi
# v = (cub, cyl)
# if cub>cyl:
#     (big,small) = ('куб', 'цилиндр')
# else:
#     (big,small) = ('цилиндр', 'куб')
# if m>=(cub+cyl):
#     print('жидкость заполнит обе емкости')
# elif max(v)<=m<(cub+cyl):
#     print('жидкость заполнит любую одну емкость')
# elif min(v)<=m<max(v):
#     print('жидкостью можно заполнить ', small, 'но нельзя заполнить ', big)
# else:
#     print('жидкостью не получится заполнить ни одну емкость')


# Даны вещественные числа: X, Y, Z. Определить, существует ли треугольник с такими длинами сторон 
# и, если существует, будет ли он прямоугольным.
# a = float(input('Введите длину стороны А: '))
# b = float(input('Введите длину стороны В: '))
# c = float(input('Введите длину стороны С: '))
# if a+b>c and a+c>b and b+c>a:
#     print('с данными длинами сторон существует ', end='')
#     print('прямоугольный треугольник' if a**2+b**2==c**2 or a**2+c**2==b**2 or b**2+c**2==a**2 else 'не прямоугольный треугольник')
# else:
#     print('треугольника с такими длинами сторон не существует')

# Дано число X. Определить, принадлежит ли это число заданному промежутку [a,b].
# a = float(input('Введите начало промежутка А: '))
# b = float(input('Введите конец промежутка В: '))
# x = float(input('Введите число Х: '))
# print('число Х принадлежит промежутку А,В включительно' if x>=a and x<=b else 'число Х не принадлежит промежутку А,В включительно')

# Определить значение функции Z=1/(XY) при произвольных X и Y.
# x = float(input('Введите X: '))
# y = float(input('Введите Y: '))
# if x==0 or y==0:
#      print('ошибка деления на 0')
# else:
#      print('Z=', 1/(x*y))

# Даны вещественные числа: A, B, C. Определить, выполняются ли неравенства A < B < C или A>=B>=C и какое именно неравенство выполняется.
# a = float(input('Введите А: '))
# b = float(input('Введите В: '))
# c = float(input('Введите С: '))
# if a<b<c or a>=b>=c:
#     print('выполняется неравенство A < B < C' if a<b<c else 'выполняется неравенство A>=B>=C')
# else:
#     print('ни одно из неравенств не выполняется')

# Даны вещественные числа X и Y. Вычислить Z. Z=sqrt(X*Y) при X > Y, Z=ln(X + Y) в противном случае.
# import math
# x = float(input('Введите X: '))
# y = float(input('Введите Y: '))
# if x>y:
#     z=math.sqrt(x*y)
# else:
#     z=math.log2(x+y)
# print('Z = ',z)

# Даны вещественные положительные числа a, b, c, d. Выясните, может ли прямоугольник со сторонами a,b
# уместиться внутри прямоугольника со сторонами c,d так, чтобы каждая сторона внутреннего прямоугольника
# была параллельна или перпендикулярна стороне внешнего прямоугольника.
# a = float(input('Введите А: '))
# b = float(input('Введите В: '))
# c = float(input('Введите С: '))
# d = float(input('Введите D: '))
# lst = [a, b, c, d]
# lst.sort()
# if  lst[0] in (a, b) and lst[3] in (c, d):
#     print('прямоугольник со сторонами a,b уместиться внутри прямоугольника со сторонами c,d')
# else:
#     print('прямоугольник со сторонами a,b не уместиться внутри прямоугольника со сторонами c,d')

# Дано вещественное число A. Вычислить f(A), если f(x)=x^2 + 4x + 5, при x <= 2;
# в противном случае f(x)=1/(x^2 + 4x + 5).
# a = float(input('Введите A: '))
# f = a**2+4*a+5
# if a<=2:
#     print('F(A) = ', f)
# else:
#     print('F(A) = ', 1/f)

# Дано вещественное число A. Вычислить f(A), если f(x)=0, при x <= 0;
# f(x)=x при 0 < x <= 1, в противном случае f(x)=x^4.
# a = float(input('Введите A: '))
# if a<=0:
#     print('F(A) = ', 0)
# elif 0<a<=1:
#     print('F(A) = ', a)
# else:
#     print('F(A) = ', a**4)

# Дано вещественное число A. Вычислить f(A), если f(x)=0 при x <= 0;
# f(x)=x^2 - x при 0 < x <= 1, в противном случае f(x)=x^2 - sin (pi x^2).
# import math
# a = float(input('Введите A: '))
# if a<=0:
#     print('F(A) = ', 0)
# elif 0<a<=1:
#     print('F(A) = ', a**2-a)
# else:
#     print('F(A) = ', a**2-math.sin(math.pi*a**2))

# Составить алгоритм и программу для реализации логических операций "И" и "ИЛИ" для двух переменных
# a = int(input('Введите 0 или 1 для переменной A: '))
# b = int(input('Введите 0 или 1 для переменной B: '))
# print(a, b)
# print('операция И для переменных А и В ', a and b, 'операция ИЛИ для переменных А и В ', a or b)

# Известен ГОД. Определить, будет ли этот год високосным, и к какому веку этот год относится.
# god = int(input('Введите год: '))
# print('год високосный' if god%4==0 else 'год не високосный')
# print('год относится к', god//100+1, 'веку')

# s1=input('Исходная строка: ')
# # определение полиндрома
# L=len(s1)
# flag=1
# for i in range(L//2):
#     if s1[i]==s1[-i-1]:
#         k=1
#     else:
#         k=0
#     flag=flag*k
# if flag==1:
#     print('Палиндром')
# else:
#     print('Не палиндром!')

# Дан одномерный массив числовых значений, насчитывающий N элементов. Поменять местами элементы,
# стоящие на чётных и нечётных местах: A[1] <-> A[2]; A[3] <-> A[4] ...
# n = int(input('введите размер массива: '))
# a = [0]*n
# for i in range(n-1):
#     a[i+1]=a[i]+1
# print(a)
# for i in range(0,n-1,2):
#     a[i], a[i+1] = a[i+1], a[i]
# print(a)

# Дан одномерный массив числовых значений, насчитывающий N элементов. Выполнить перемещение
# элементов массива по кругу вправо, т. е. A[1] \to A[2]; A[2] \to A[3]; ... A[n] \to A[1]
# n = int(input('введите размер массива: '))
# a = [0]*n
# for i in range(n-1):
#     a[i+1]=a[i]+1
# print(a)
# b = a[-1]
# for i in range(-1,-n,-1):
#     a[i] = a[i-1]
# a[0] = b
# print(a)

# Дан одномерный массив числовых значений, насчитывающий N элементов. Поменять местами первую и вторую половины массива.
# n = int(input('введите размер массива: '))
# a = [0]*n
# for i in range(n-1):
#     a[i+1]=a[i]+1
# print(a)
# for k in range(n//2):
#     a[k], a[k+(n//2)+(n%2)] = a[k+(n//2)+(n%2)], a[k]
# print(a)

# Дан одномерный массив числовых значений, насчитывающий N элементов.
# Поменять местами группу из M элементов, начинающихся с позиции K с группой из M элементов, начинающихся с позиции P.
# n = int(input('введите размер массива: '))
# m = int(input('введите количество элементов в группе: '))
# k = int(input('введите позицию первой группы: '))
# p = int(input('введите позицию второй группы: '))
# a = [0]*n
# for i in range(n-1):
#     a[i+1]=a[i]+1
# print(a)
# for i in range(m):
#     a[k+i], a[p+i] = a[p+i], a[k+i]
# print(a)

# Дан одномерный массив числовых значений, насчитывающий N элементов. Вставить группу из M новых элементов, начиная с позиции K.
# n = int(input('введите размер массива: '))
# m = int(input('введите количество элементов в группе: '))
# k = int(input('введите позицию вставки: '))
# a = [0]*n
# for i in range(n-1):
#     a[i+1]=a[i]+1
# print(a)
# b = [0]*m
# for j in range(m):
#     a.insert(k+j,b[j])
# print(a)

# Дан одномерный массив числовых значений, насчитывающий N элементов.
# Сумму элементов массива и количество положительных элементов поставить на первое и второе место
# n = int(input('введите размер массива: '))
# a = [0]*n
# for i in range(n-1):
#     a[i+1]=a[i]+1
# a[n//2] = -7
# print(a)
# a.insert(0,sum(a))
# count = 0
# for j in range(n):
#     if a[j]>=0:
#         count=count+1
# a.insert(1,count)
# print(a)

# Дан одномерный массив числовых значений, насчитывающий N элементов. Исключить из него M элементов, начиная с позиции K.
# n = int(input('введите размер массива: '))
# m = int(input('введите количество элементов в группе: '))
# k = int(input('введите позицию исключения: '))
# a = [0]*n
# for i in range(n-1):
#     a[i+1]=a[i]+1
# print(a)
# del a[k:k+m]
# print(a)

# Дан одномерный массив числовых значений, насчитывающий N элементов. Исключить все нулевые элементы
# n = int(input('введите размер массива: '))
# a = [0]*n
# for i in range(n-1):
#     a[i+1]=a[i]+1
# a[n//2] = 0
# a[10] = 0
# print(a)
# j = 0
# while j <= n-1:
#     if a[j]==0:
#         del a[j]
#         n-=1
#     else:
#         j+=1
# print(a)

# Дан одномерный массив числовых значений, насчитывающий N элементов.
# После каждого отрицательного элемента вставить новый элемент, равный квадрату этого отрицательного элемента.
# n = int(input('введите размер массива: '))
# a = [0]*n
# for i in range(n-1):
#     a[i+1]=a[i]+1
# a[n//2] = -8
# a[10] = -3
# print(a)
# j = 0
# while j <= n-1:
#     if a[j]<0:
#         a.insert(j+1, a[j]**2)
#         n+=1
#     j+=1
# print(a)

# Дан одномерный массив числовых значений, насчитывающий N элементов.
# Определить, образуют ли элементы массива, расположенные перед первым отрицательным элементом, возрастающую последовательность.
# n = int(input('введите размер массива: '))
# a = [0]*n
# for i in range(n-1):
#     a[i+1]=a[i]+1
# a[n//2] = -8
# #a[3] = 5
# print(a)
# b = []
# p = True
# for j in range(n-1):
#     if a[j]<0:
#         for k in range(j):
#             b.append(a[k])
#         b.sort()
#         for k in range(j):
#             p=p*(a[k]==b[k])
#         print('элементы образуют возрастающую последовательность' if p else 'элементы не образуют возрастающую последовательность')
#         break

# Дан одномерный массив числовых значений, насчитывающий N элементов.
# Определить, образуют ли элементы массива, расположенные перед первым отрицательным элементом, убывающую последовательность.
# n = int(input('введите размер массива: '))
# a = [0]*n
# for i in range(n-1):
#     a[i+1]=a[i]-1
# print(a)
# b = []
# p = True
# for j in range(n):
#     if a[j]<0:
#         for k in range(j):
#             b.append(a[k])
#         b.reverse()
#         for k in range(j):
#             p=p*(a[k]==b[k])
#         print('элементы образуют убывающую последовательность' if p else 'элементы не образуют убывающую последовательность')
#         break

# Дан одномерный массив числовых значений, насчитывающий N элементов. Из элементов исходного массива построить два новых.
# В первый должны входить только элементы с положительными значениями, а во второй — только элементы с отрицательными значениями.
# n = int(input('введите размер массива: '))
# a = [0]*n
# for i in range(n-1):
#     a[i+1]=-(a[i]+1)
# print(a)
# b = []
# c = []
# for j in range(n):
#     if a[j]>=0:
#         b.append(a[j])
#     else:
#         c.append(a[j])
# print(b,'\n',c)

# Дан одномерный массив числовых значений, насчитывающий N элементов.
# Добавить столько элементов, чтобы элементов с положительными и отрицательными значениями стало бы поровну.
# n = int(input('введите размер массива: '))
# a = [6]*n
# for i in range(0,n-1,3):
#     a[i+1]=-(a[i]+1)
# print(a)
# pos=0
# neg=0
# for j in range(n):
#     if a[j]>=0:
#         pos+=1
#     else:
#         neg+=1
# if pos>neg:
#     b=[-1]*(pos-neg)
# elif neg>pos:
#     b=[0]*(pos-neg)
# a.extend(b)
# print(a)

# Дан одномерный массив числовых значений, насчитывающий N элементов.
# Добавить к элементам массива такой новый элемент, чтобы сумма элементов с положительными значениями стала бы равна
# модулю суммы элементов с отрицательными значениями.
# n = int(input('введите размер массива: '))
# a = [6]*n
# for i in range(0,n-1,3):
#     a[i+1]=-(a[i]+1)
# a[6]=-10
# print(a)
# pos=0
# neg=0
# for j in range(n):
#     if a[j]>=0:
#         pos+=a[j]
#     else:
#         neg+=a[j]
# a.append(-pos-neg)
# print(a)


# Дан одномерный массив числовых значений, насчитывающий N элементов. Дано положительное число T.
# Разделить это число между положительными элементами массива пропорционально значениям этих элементов
# и добавить полученные доли к соответствующим элементам.
# n = int(input('введите размер массива: '))
# t = int(input('введите положительное число T: '))
# a = [0]*n
# for i in range(n-1):
#     a[i+1]=a[i]+1
# a[3]=58
# print(a)
# summ=0
# for j in range(n):
#     if a[j]>0:
#         summ+=a[j]
# for j in range(n):
#     if a[j]>0:
#         a[j]+=t*(a[j]/summ)
# print(a)

# Дан одномерный массив числовых значений, насчитывающий N элементов. Исключить из массива элементы, принадлежащие промежутку [B; C].
# n = int(input('введите размер массива: '))
# b = int(input('введите начало исключаемого промежутка: '))
# c = int(input('введите конец исключаемого промежутка: '))
# a = [0]*n
# for i in range(n-1):
#     a[i+1]=a[i]+1
# print(a)
# del a[b:c+1]
# print(a)

# Дан одномерный массив числовых значений, насчитывающий N элементов.
# Вместо каждого элемента с нулевым значением поставить сумму двух предыдущих элементов массива.
# n = int(input('введите размер массива: '))
# a = [0]*n
# for i in range(n-1):
#     a[i+1]=a[i]+1
# a[6]=0
# print(a)
# for j in range(2,n):
#     if a[j]==0:
#         a[j]=a[j-1]+a[j-2]
# print(a)

# Дан одномерный массив числовых значений, насчитывающий N элементов. Определить, имеются ли в массиве два подряд идущих нуля.
# n = int(input('введите размер массива: '))
# a = [0]*n
# for i in range(n-1):
#     a[i+1]=a[i]+1
# a[6]=0
# a[7]=0
# print(a)
# p = False
# for j in range(n-1):
#     p+=a[j]==a[j+1]==0
# print('имеются в массиве два подряд идущих нуля' if p else 'отсутствуют в массиве два подряд идущих нуля')

# Дан одномерный массив числовых значений, насчитывающий N элементов.
# Подсчитать количество чисел, делящихся на 3 нацело, и среднее арифметическое чисел с чётными значениями.
# Поставить полученные величины на первое и последнее места в массиве (увеличив массив на 2 элемента).
# n = int(input('введите размер массива: '))
# a = [0]*n
# for i in range(n-1):
#     a[i+1]=a[i]+1
# print(a)
# count2 = 0
# count3 = 0
# summ = 0
# for j in range(n):
#     if a[j]%3==0:
#         count3+=1
#     if a[j]%2==0:
#         count2+=1
#         summ+=a[j]
# a.append(summ/count2)
# a.insert(0, count3)
# print(a)

# Заданы M строк символов, которые вводятся с клавиатуры. Найти количество символов в самой длинной строке.
# Выровнять строки по самой длинной строке, поставив перед каждой строкой соответствующее количество звёздочек.
# m = int(input('Введите количество строк :'))
# max = 0
# a=[0]*m
# for i in range(m-1):
#     a[i]=input('Введите строку :')
#     if len(a[i])>max:
#         max = len(a[i])
# for j in range(m-1):
#     a[j]='*'*(max-len(a[j]))+a[j]
#     print(a[j])

# Заданы M строк символов, которые вводятся с клавиатуры.
# Из заданных строк, каждая из которых представляет одно слово, составить одну длинную строку, разделяя слова пробелами.
# m = int(input('Введите количество слов :'))
# a=['']*m
# for i in range(m):
#     a[i]=input('Введите слово :')
# s = ' '.join(a)
# print(s)

# Заданы M строк слов, которые вводятся с клавиатуры. Подсчитать количество гласных букв в каждой из заданных строк.
# m = int(input('Введите количество слов :'))
# a=['']*m
# c=[0]*m
# let = ['e', 'u', 'o', 'a', 'i']
# for i in range(m):
#     a[i]=input('Введите слово :')
#     for j in range(len(a[i])):
#         c[i]+=let.count(a[i][j])
# print(c)

# Заданы M строк слов, которые вводятся с клавиатуры (в каждой строке – одно слово).
# Вводится слог (последовательность букв). Подсчитать количество таких слогов в каждой строке.
# m = int(input('Введите количество слов :'))
# slo = input('введите искомый слог :')
# a=['']*m
# c=[0]*m
# for i in range(m):
#     a[i]=input('Введите слово :')
#     c[i]=a[i].count(slo)
# print(c)

# Заданы M строк слов, которые вводятся с клавиатуры (в каждой строке – одно слово).
# Вводится слог (последовательность букв). Удалить данный слог из каждой строки.
# m = int(input('Введите количество слов :'))
# slo = input('введите искомый слог :')
# a=['']*m
# b=['']*m
# c=[0]*m
# for i in range(m):
#     a[i]=input('Введите слово :')
#     c[i]=a[i].count(slo)
#     for j in range(c[i]):
#         pos=a[i].find(slo)
#         a[i]=a[i][0:pos]+a[i][pos+len(slo):len(a[i])]
# print(a)

# Заданы M строк символов, которые вводятся с клавиатуры. Напечатать все центральные буквы строк нечетной длины.
# m = int(input('Введите количество слов :'))
# a=['']*m
# for i in range(m):
#      a[i]=input('Введите слово :')
#      if len(a[i])%2!=0:
#         print('   ', a[i][len(a[i])//2])

# Заданы M строк символов, которые вводятся с клавиатуры. Каждая строка содержит слово.
# Записать каждое слово в разрядку (вставить по пробелу между буквами).
# m = int(input('Введите количество слов :'))
# a=['']*m
# s=['']*m
# for i in range(m):
#      a[i]=input('Введите слово :')
#      lst = list(a[i])
#      s[i] = ' '.join(lst)
# print(s)

# Задана строка символов, в которой встречается символ ".". Поставить после каждого такого символа системное время ПК.
# from datetime import datetime
# t1 = datetime.now().strftime("%H:%M:%S")
# str = input('Введите строку :')
# lst = str.split('.')
# str1 = ('.'+t1).join(lst)
# print(str1)

# Заданы M строк, которые вводятся с клавиатуры. Подсчитать количество пробелов в каждой из строк.
# m = int(input('Введите количество строк :'))
# a=['']*m
# p=[0]*m
# b=(' ')
# for i in range(m):
#      a[i]=input('Введите строку :')
#      p[i]=a[i].count(b)
# print(p)

# Заданы M строк символов, которые вводятся с клавиатуры.
# Каждая строка представляет собой последовательность символов, включающих в себя вопросительные знаки.
# Заменить в каждой строке все имеющиеся вопросительные знаки звёздочками.
# m = int(input('Введите количество строк :'))
# str=['']*m
# str1=['']*m
# for i in range(m):
#     str[i]=input('Введите строку :')
#     lst = str[i].split('?')
#     str1[i] = ('*').join(lst)
# print(str1)

# Последовательно вводятся числа. Определить сумму чисел с нечётными номерами и произведение чисел с чётными номерами (по порядку ввода).
# Подсчитать количество слагаемых и количество сомножителей. При вводе числа 55555 закончить работу.
# m = int(input('Введите число :'))
# n=0
# summ=0
# mult=1
# count1=0
# count2=0
# while m!=55555:
#     n+=1
#     if n%2==0:
#         mult*=m
#         count2+=1
#     else:
#         summ+=m
#         count1+=1
#     m = int(input('Введите число :'))
# print('сумма чисел с нечетными номерами: ', summ, ' количество чисел с нечетными номерами: ', count1)
# print('произведение чисел с четными номерами: ', mult, ' количество чисел с четными номерами: ', count2)

# Определить сумму вводимых положительных чисел. Причём числа с нечётными номерами (по порядку ввода) суммировать с обратным знаком,
# а числа с чётными номерами перед суммированием возводить в квадрат. Подсчитать количество слагаемых.
# При вводе первого отрицательного числа закончить работу.
# m = int(input('Введите число :'))
# n=0
# summ1=0
# summ2=0
# count1=0
# count2=0
# while m>=0:
#     n+=1
#     if n%2==0:
#         summ2+=m**2
#         count2+=1
#     else:
#         summ1+=-m
#         count1+=1
#     m = int(input('Введите число :'))
# print('сумма чисел с нечетными номерами: ', summ1, ' количество чисел с нечетными номерами: ', count1)
# print('сумма чисел с четными номерами: ', summ2, ' количество чисел с четными номерами: ', count2)

# Даны число P и число H. Определить сумму чисел меньше P, произведение чисел больше H и количество чисел в диапазоне значений P и H.
# При вводе числа равного P или H, закончить работу.
# p = int(input('Введите нижнюю границу Р :'))
# h = int(input('Введите верхнюю границу Н :'))
# m = int(input('Введите число :'))
# summ=0
# mult=1
# count=0
# while m!=p and m!=h:
#     if m<p:
#         summ+=m
#     elif m>h:
#         mult*=m
#     else:
#         count+=1
#     m = int(input('Введите число :'))
# print('сумма чисел меньше P : ', summ, '; произведение чисел больше H : ', mult, '; количество чисел в диапазоне значений P и H : ', count)

# Суммировать вводимые числа, среди которых нет нулевых.
# При вводе нуля обеспечить вывод текущего значения суммы. При вводе числа 99999 закончить работу.
# m = int(input('Введите число :'))
# summ=0
# while m!=99999:
#     if m == 0:
#         print('текущая сумма: ',summ)
#     summ+=m
#     m = int(input('Введите число :'))
# print('конечная сумма: ',summ)

# Вводятся положительные числа.
# Определить сумму чисел, делящихся на положительное число B нацело.
# При вводе отрицательного числа закончить работу.
# b = int(input('Введите делитель В :'))
# m = int(input('Введите число :'))
# summ=0
# while m>=0:
#     if m%b==0:
#         summ+=m
#     m = int(input('Введите число :'))
# print('сумма чисел, делящихся на положительное число B нацело: ', summ)

# Для вводимых чисел определить процент положительных и отрицательных чисел. При вводе числа -65432 закончить работу.
# m = int(input('Введите число :'))
# count=0
# pos=0
# neg=0
# proc1=0
# proc2=0
# while m!=-65432:
#     count+=1
#     if m>=0:
#         pos+=1
#     else:
#         neg+=1
#     proc1=100*pos/count
#     proc2=100*neg/count
#     m = int(input('Введите число :'))
# print('процент положительных чисел: ', proc1, '; процент отрицательных чисел: ', proc2)

# Выполнить обработку элементов прямоугольной матрицы A, имеющей N строк и M столбцов.
# Найти наибольший элемент столбца матрицы A, для которого сумма абсолютных значений элементов максимальна.
# import numpy
# n=int(input('Количество строк: '))
# m=int(input('Количество столбцов: '))
# a=numpy.zeros([n,m])
# summ=[0]*m
# summ_max=0
# col=0
# max=0
# for i in range(n):
#     for j in range(m):
#         print('Элемент матрицы [',i,'][',j,']')
#         a[i, j]=input('Введите элемент: ')
#         summ[j]+=abs(a[i, j])
# for k in range(m):
#     if summ[k]>summ_max:
#         summ_max=summ[k]
#         col=k
# for l in range(n):
#     if a[l, col]>max:
#         max=a[l, col]
# print(max)

# Выполнить обработку элементов прямоугольной матрицы A, имеющей N строк и M столбцов.
# Найти наибольшее значение среди средних значений для каждой строки матрицы.
# import numpy
# n=int(input('Количество строк: '))
# m=int(input('Количество столбцов: '))
# a=numpy.zeros([n,m])
# summ=[0]*n
# summ_max=0
# for i in range(n):
#     for j in range(m):
#         print('Элемент матрицы [',i,'][',j,']')
#         a[i, j]=input('Введите элемент: ')
#         summ[i]+=abs(a[i, j])
# for k in range(n):
#     if summ[k]>summ_max:
#         summ_max=summ[k]
#         str=k
# max=summ_max/m
# print('в строке: ', str, 'среднее: ', max)

# Выполнить обработку элементов прямоугольной матрицы A, имеющей N строк и M столбцов.
# Найти наименьший элемент столбца матрицы A, для которого сумма абсолютных значений элементов максимальна.
# import numpy
# n=int(input('Количество строк: '))
# m=int(input('Количество столбцов: '))
# a=numpy.zeros([n,m])
# summ=[0]*m
# summ_max=0
# for i in range(n):
#     for j in range(m):
#         print('Элемент матрицы [',i,'][',j,']')
#         a[i, j]=input('Введите элемент: ')
#         summ[j]+=abs(a[i, j])
# for k in range(m):
#     if summ[k]>summ_max:
#         summ_max=summ[k]
#         col=k
# min=a[0, col]
# for l in range(n):
#     if a[l, col]<min:
#         min=a[l, col]
# print('наименьший элемент столбца ', col, 'равен ', min)

# Выполнить обработку элементов прямоугольной матрицы A, имеющей N строк и M столбцов.
# Найти наименьшее значение среди средних значений для каждой строки матрицы.
# import numpy
# n=int(input('Количество строк: '))
# m=int(input('Количество столбцов: '))
# a=numpy.zeros([n, m])
# summ=[0]*m
# for i in range(n):
#     for j in range(m):
#         print('Элемент матрицы [',i,'][',j,']')
#         a[i, j]=input('Введите элемент: ')
#         summ[i]+=a[i, j]
# summ_min=summ[0]
# for k in range(n):
#     if summ[k]<summ_min:
#         summ_min=summ[k]
# print('наименьшее значение среди средних значений строк: ', summ_min/m)

# Выполнить обработку элементов прямоугольной матрицы A, имеющей N строк и M столбцов.
# Определить средние значения по всем строкам и столбцам матрицы. Результат оформить в виде матрицы из N +1 строк и M +1 столбцов.
# import numpy
# n=int(input('Количество строк: '))
# m=int(input('Количество столбцов: '))
# a=numpy.zeros([n, m])
# b=numpy.zeros([n+1, m+1])
# summ_str=[0]*n
# summ_col=[0]*m
# for i in range(n):
#     for j in range(m):
#         print('Элемент матрицы [',i,'][',j,']')
#         a[i, j]=input('Введите элемент: ')
#         b[i, j]=a[i, j]
#         summ_str[i]+=a[i, j]
#         summ_col[j]+=a[i, j]
# for k in range(n):
#     b[k, m]=summ_str[k]/m
# for l in range(m):
#     b[n,l]=summ_col[l]/n
# for i in range(n+1):
#     for j in range(m+1):
#         print(b[i, j],';', end='')
#     print()

# Выполнить обработку элементов прямоугольной матрицы A, имеющей N строк и M столбцов.
# Найти сумму элементов всей матрицы. Определить, какую долю в этой сумме составляет сумма элементов каждого столбца.
# Результат оформить в виде матрицы из N + 1 строк и M столбцов.
# import numpy
# n=int(input('Количество строк: '))
# m=int(input('Количество столбцов: '))
# a=numpy.zeros([n, m])
# b=numpy.zeros([n+1, m])
# summ = 0
# summ_col = [0]*m
# for i in range(n):
#     for j in range(m):
#         print('Элемент матрицы [',i,'][',j,']')
#         a[i, j]=input('Введите элемент: ')
#         summ+=a[i, j]
#         summ_col[j]+=a[i, j]
#         b[i, j]=a[i, j]
# for k in range(m):
#     b[n,k]=summ_col[k]/summ
# for i in range(n+1):
#     for j in range(m):
#         print(b[i, j],';', end='')
#     print()

# Выполнить обработку элементов прямоугольной матрицы A, имеющей N строк и M столбцов.
# Найти сумму элементов всей матрицы. Определить, какую долю в этой сумме составляет сумма элементов каждой строки.
# Результат оформить в виде матрицы из N строк и M+1 столбцов.
# import numpy
# n=int(input('Количество строк: '))
# m=int(input('Количество столбцов: '))
# a=numpy.zeros([n, m])
# b=numpy.zeros([n, m+1])
# summ = 0
# summ_str = [0]*n
# for i in range(n):
#     for j in range(m):
#         print('Элемент матрицы [',i,'][',j,']')
#         a[i, j]=input('Введите элемент: ')
#         summ+=a[i, j]
#         summ_str[i]+=a[i, j]
#         b[i, j]=a[i, j]
# for k in range(n):
#     b[k,m]=summ_str[k]/summ
# for i in range(n):
#     for j in range(m+1):
#         print(b[i, j],';', end='')
#     print()

# Выполнить обработку элементов прямоугольной матрицы A, имеющей N строк и M столбцов.
# Определить, сколько отрицательных элементов содержится в каждом столбце и в каждой строке матрицы.
# Результат оформить в виде матрицы из N + 1 строк и M + 1 столбцов.
# import numpy
# n=int(input('Количество строк: '))
# m=int(input('Количество столбцов: '))
# a=numpy.zeros([n, m])
# b=numpy.zeros([n+1, m+1])
# count_str = [0]*n
# count_col = [0]*m
# for i in range(n):
#     for j in range(m):
#         print('Элемент матрицы [',i,'][',j,']')
#         a[i, j]=input('Введите элемент: ')
#         b[i, j]=a[i, j]
#         if a[i, j]<0:
#             count_str[i]+=1
#             count_col[j]+=1
# for k in range(n):
#     b[k,m]=count_str[k]
# for k in range(m):
#     b[n,k]=count_col[k]
# for i in range(n+1):
#     for j in range(m+1):
#         print(b[i, j],';', end='')
#     print()

# Выполнить обработку элементов прямоугольной матрицы A, имеющей N строк и M столбцов.
# Определить, сколько нулевых элементов содержится в верхних L строках матрицы и в левых К столбцах матрицы.
# import numpy
# n=int(input('Количество строк: '))
# m=int(input('Количество столбцов: '))
# l=int(input('Количество верхних строк L: '))
# k=int(input('Количество левых столбцов K: '))
# a=numpy.zeros([n, m])
# count_str = 0
# count_col = 0
# for i in range(n):
#     for j in range(m):
#         print('Элемент матрицы [',i,'][',j,']')
#         a[i, j]=input('Введите элемент: ')
#         if a[i, j]==0:
#             if i<l:
#                 count_str+=1
#             if j<k:
#                 count_col+=1
# print('в верхних', l, 'строках матрицы содержится ', count_str, 'нулевых элементов')
# print('в левых', k, 'столбцах матрицы содержится ', count_col, 'нулевых элементов')
# for i in range(n):
#     for j in range(m):
#         print(a[i, j],';', end='')
#     print()

# Выполнить обработку элементов прямоугольной матрицы A, имеющей N строк и M столбцов.
# Перемножить элементы каждого столбца матрицы с соответствующими элементами K-го столбца.
# import numpy
# n=int(input('Количество строк: '))
# m=int(input('Количество столбцов: '))
# k=int(input('Столбец K: '))
# a=numpy.zeros([n, m])
# for i in range(n):
#     for j in range(m):
#         print('Элемент матрицы [',i,'][',j,']')
#         a[i, j]=input('Введите элемент: ')
# for i in range(n):
#     for j in range(k):
#         a[i, j]=a[i, j]*a[i, k]
# for i in range(n):
#     for j in range(k+1,m):
#         a[i, j]=a[i, j]*a[i, k]
# for i in range(n):
#     for j in range(m):
#         print(a[i, j],';', end='')
#     print()

# Выполнить обработку элементов прямоугольной матрицы A, имеющей N строк и M столбцов.
# Просуммировать элементы каждой строки матрицы с соответствующими элементами L-й строки.
# import numpy
# n=int(input('Количество строк: '))
# m=int(input('Количество столбцов: '))
# l=int(input('Строка L: '))
# a=numpy.zeros([n, m])
# for i in range(n):
#     for j in range(m):
#         print('Элемент матрицы [',i,'][',j,']')
#         a[i, j]=input('Введите элемент: ')
# for i in range(l):
#     for j in range(m):
#         a[i, j]+=a[l, j]
# for i in range(l+1, n):
#     for j in range(m):
#         a[i, j]+=a[l, j]
# for i in range(n):
#     for j in range(m):
#         print(a[i, j],';', end='')
#     print()

# Выполнить обработку элементов прямоугольной матрицы A, имеющей N строк и M столбцов.
# Разделить элементы каждой строки на элемент этой строки с наибольшим значением.
import numpy
n=int(input('Количество строк: '))
m=int(input('Количество столбцов: '))
l=int(input('Строка L: '))
a=numpy.zeros([n, m])
max=[0]*n
for i in range(n):
    for j in range(m):
        print('Элемент матрицы [',i,'][',j,']')
        a[i, j]=input('Введите элемент: ')
        if a[i, j]>max[i]:
            max[i]=a[i, j]
